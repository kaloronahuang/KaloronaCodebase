// password.cpp
#include <bits/stdc++.h>

using namespace std;

int n, limV, limE, etot;
pair<int, int> edges[2000];

const int table[] = {3268512, 3243496, 3268072, 3243500, 3268076, 3243944, 3268073, 3243650, 3268520, 3243714, 3268456, 3243746, 3268354, 3243914, 3268482, 3243948, 3268524, 3243754, 3268514, 3243686, 3268460, 3243736, 3268490, 3243922, 3268521, 3243952, 3268522, 3243732, 3268366, 3243758, 3268494, 3243768, 3268525, 3243926, 3268526, 3243956, 3268430, 3243764, 3268491, 3243733, 3268504, 3243759, 3268523, 3243927, 3268440, 3243958, 3268498, 3144624, 3268528, 3243765, 3268527, 3144536, 3268382, 3144476, 3268506, 3243959, 3268536, 3144504, 3268207, 3142578, 3268472, 3144188, 3268510, 3144494, 3268540, 3144664, 3268530, 3143565, 3268383, 3144526, 3268507, 3144632, 3268537, 3144621, 3268538, 3144562, 3264509, 3144626, 3268511, 3144622, 3268541, 3144506, 3268542, 3140527, 3145688, 3144654, 3135439, 3139535, 3268415, 3143503, 3268539, 3096510, 3144591, 3140559, 3144527, 3144666, 3267583, 0, 3268543, 0, 3268475};

int main()
{

	scanf("%d%d%d", &n, &limV, &limE);
	if (n <= 100)
	{
		for (int i = 1; i < 6; i++)
			for (int j = 1; j <= 6; j++)
				if (i != j)
					edges[++etot] = make_pair(i, j);
		if (table[n] == 0)
		{
			printf("%d %d\n", n + 1, 2 * n - 1);
			for (int i = 2; i <= n + 1; i++)
				printf("%d %d\n", i - 1, i);
			for (int i = 1; i <= n - 1; i++)
				printf("%d %d\n", i, n + 1);
		}
		else
		{
			printf("%d %d\n", 6, __builtin_popcount(table[n]));
			for (int i = 0; i < etot; i++)
				if (table[n] & (1 << i))
					printf("%d %d\n", edges[i + 1].first, edges[i + 1].second);
		}
		return 0;
	}
	if (n - (n & (-n)) == 0)
	{
		// 2^k;
		int k = 0;
		for (k = 0; (n & (1 << k)) == 0; k++)
			;
		printf("%d %d\n", k + 2, (k << 1) + 1);
		for (int i = 1; i <= k; i++)
			printf("%d %d\n%d %d\n", i, i + 1, i, k + 2);
		printf("%d %d\n", k + 1, k + 2);
	}
	return 0;
}
